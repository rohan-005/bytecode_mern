{
  "id": "c-programming-fundamentals",
  "name": "C Programming Fundamentals",
  "description": "Master the fundamentals of C programming and learn how to build efficient, structured programs. Understand variables, data types, loops, functions, and memory concepts.",
  "instructor": "Michael Thompson",
  "duration": "8 weeks",
  "level": "Beginner",
  "price": 0,
  "image": "/images/c-course.jpg",
  "category": "Programming",
  "rating": 4.8,
  "ratingCount": 2140,
  "students": 2140,
  "tags": ["c", "programming", "logic", "beginner", "coding"],
  "whatYouLearn": [
    "Understand the structure of a C program",
    "Work with data types and variables",
    "Use loops and conditional statements",
    "Create and call functions",
    "Understand arrays and pointers",
    "Compile and debug C programs"
  ],
  "prerequisites": ["Basic computer knowledge", "Interest in programming and logic"],
  "exercises": [
    {
      "id": "ex1",
      "title": "Hello World Program",
      "description": "Write your first C program to print 'Hello, World!'. Learn about syntax and program structure.",
      "duration": "20 min",
      "difficulty": "Easy",
      "language": "c",
      "theory": "Every C program starts with a main() function. The #include directive is used to include standard libraries such as stdio.h for input/output operations. printf() is used to display output on the screen.",
      "objective": "Write a C program that prints 'Hello, World!' to the console.",
      "initialCode": "#include <stdio.h>\n\nint main() {\n    // Write your code here\n    return 0;\n}",
      "solutionCode": "#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}",
      "requirements": [
        "Include stdio.h",
        "Create a main() function",
        "Use printf() for output",
        "Return 0 at the end"
      ],
      "hints": [
        "Use \\n for a newline character",
        "End every statement with a semicolon",
        "Remember to include stdio.h at the top"
      ]
    },
    {
      "id": "ex2",
      "title": "Using Functions and Variables",
      "description": "Learn how to use variables and functions to perform arithmetic operations.",
      "duration": "30 min",
      "difficulty": "Easy",
      "language": "c",
      "theory": "Functions in C allow you to organize code into reusable blocks. Variables are declared with a data type and can store values for computation.",
      "objective": "Create a program that adds two integers using a function.",
      "initialCode": "#include <stdio.h>\n\n// Declare your function here\n\nint main() {\n    int a = 5, b = 3;\n    // Call function and print result\n    return 0;\n}",
      "solutionCode": "#include <stdio.h>\n\nint add(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    int a = 5, b = 3;\n    printf(\"Sum = %d\\n\", add(a, b));\n    return 0;\n}",
      "requirements": [
        "Declare a function named add()",
        "Return the sum of two integers",
        "Print the result using printf()"
      ],
      "hints": [
        "Define add() before or after main()",
        "Return x + y from the function"
      ]
    }
  ],
  "references": [
    {
      "title": "TutorialsPoint - C Programming",
      "description": "Comprehensive guide for beginners in C.",
      "url": "https://www.tutorialspoint.com/cprogramming/index.htm"
    },
    {
      "title": "GeeksforGeeks - C Basics",
      "description": "Learn about syntax, variables, and loops in C.",
      "url": "https://www.geeksforgeeks.org/basics-of-c-language/"
    }
  ]
}
