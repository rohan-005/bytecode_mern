{
  "id": "cpp",
  "name": "C++ Complete: From Basics to Modern C++",
  "description": "Comprehensive C++ course covering syntax, OOP, STLs, memory management, smart pointers, templates, and modern C++ best practices (C++11 and later).",
  "instructor": "Rohit Mehra",
  "duration": "10 weeks",
  "level": "Beginner â†’ Advanced",
  "price": 0,
  "image": "/logos/cpp.png",
  "category": "Programming",
  "rating": 4.8,
  "ratingCount": 2750,
  "students": 2750,
  "tags": ["cpp", "c++", "stl", "templates", "modern-cpp"],
  "whatYouLearn": [
    "C++ syntax and program model",
    "Functions, classes, inheritance and polymorphism",
    "RAII and resource management",
    "STL containers and algorithms",
    "Smart pointers and move semantics",
    "Templates and generic programming",
    "Debugging and performance basics"
  ],
  "prerequisites": ["Familiarity with basic programming concepts", "Comfort with using a terminal and compiler (g++)"],
  "exercises": [
    {
      "id": "ex1",
      "title": "Hello C++ & IO",
      "description": "Write a C++ program that prints a greeting and reads a number from stdin.",
      "duration": "15 min",
      "difficulty": "Easy",
      "language": "cpp",
      "theory": "C++ uses iostream (`std::cout`, `std::cin`) for input/output. Source files are `.cpp` and compiled with `g++`.",
      "objective": "Read a number and print a formatted message.",
      "initialCode": "#include <iostream>\nint main(){\n  // code\n}",
      "solutionCode": "#include <iostream>\nint main(){\n  int n; std::cout<<\"Enter a number: \"; std::cin>>n;\n  std::cout<<\"You entered: \"<<n<<std::endl;\n  return 0;\n}",
      "requirements": ["Use std::cout/std::cin", "Compile with g++"],
      "hints": ["Use `std::endl` or `\\n` appropriately"]
    },
    {
      "id": "ex2",
      "title": "Classes & OOP",
      "description": "Define a class with constructor, destructor, methods and demonstrate encapsulation.",
      "duration": "45 min",
      "difficulty": "Medium",
      "language": "cpp",
      "theory": "C++ classes encapsulate data and behavior. Use public/private sections and constructors for initialization.",
      "objective": "Create a `Rectangle` class with area method and demonstrate usage.",
      "initialCode": "class Rectangle{ /* fields and methods */ };\nint main(){ }",
      "solutionCode": "#include <iostream>\nclass Rectangle{\nprivate:\n  double w,h;\npublic:\n  Rectangle(double w,double h):w(w),h(h){}\n  double area() const { return w*h; }\n};\nint main(){ Rectangle r(3,4); std::cout<<r.area()<<\"\\n\"; }",
      "requirements": ["Use constructor and a const method", "Demonstrate encapsulation"],
      "hints": ["Mark methods `const` when they don't modify object state"]
    },
    {
      "id": "ex3",
      "title": "Standard Template Library (STL)",
      "description": "Work with vector, string, map and use standard algorithms like sort and find.",
      "duration": "1 hour",
      "difficulty": "Medium",
      "language": "cpp",
      "theory": "STL provides reusable container types and algorithms; prefer algorithms over hand-coded loops when appropriate.",
      "objective": "Read integers into a `std::vector`, sort them and print unique values using `std::sort` and `std::unique`.",
      "initialCode": "#include <vector>\n// code",
      "solutionCode": "#include <bits/stdc++.h>\nint main(){ std::vector<int> v={4,2,2,5,1}; std::sort(v.begin(),v.end()); v.erase(std::unique(v.begin(),v.end()), v.end()); for(int x:v) std::cout<<x<<\" \"; }\n",
      "requirements": ["Use vector, sort and unique", "Avoid manual duplicate removal"],
      "hints": ["Use algorithms from `<algorithm>` and containers from `<vector>`/`<map>`"]
    },
    {
      "id": "ex4",
      "title": "Smart Pointers & RAII",
      "description": "Use `std::unique_ptr` and `std::shared_ptr` to manage dynamic memory safely.",
      "duration": "1 hour",
      "difficulty": "Medium",
      "language": "cpp",
      "theory": "RAII (Resource Acquisition Is Initialization) ties resource lifetime to object lifetime. Smart pointers prevent leaks and express ownership.",
      "objective": "Replace raw `new/delete` in a sample with smart pointers.",
      "initialCode": "/* allocate object with new and delete */",
      "solutionCode": "#include <memory>\nstruct X{ X(){ } };\nint main(){ auto p = std::make_unique<X>(); auto q = std::make_shared<X>(); }\n",
      "requirements": ["Use `std::make_unique` and `std::make_shared`", "Avoid raw new/delete"],
      "hints": ["Prefer unique_ptr unless shared ownership is required"]
    },
    {
      "id": "ex5",
      "title": "Move Semantics & Performance",
      "description": "Implement move constructor and move assignment to avoid unnecessary copies.",
      "duration": "1 hour",
      "difficulty": "Advanced",
      "language": "cpp",
      "theory": "Move semantics allow transferring resources efficiently. Understand copy vs move and rule of five.",
      "objective": "Create a `Buffer` class that implements move constructor/assignment and test with `std::move`.",
      "initialCode": "/* Buffer skeleton */",
      "solutionCode": "class Buffer{\n  char *data; size_t sz;\npublic:\n  Buffer(size_t n):data(new char[n]),sz(n){}\n  ~Buffer(){ delete[] data; }\n  Buffer(const Buffer& o):data(new char[o.sz]),sz(o.sz){ std::copy(o.data,o.data+sz,data); }\n  Buffer(Buffer&& o):data(o.data),sz(o.sz){ o.data=nullptr; o.sz=0; }\n  Buffer& operator=(Buffer&& o){ if(this!=&o){ delete[] data; data=o.data; sz=o.sz; o.data=nullptr; o.sz=0; } return *this; }\n};",
      "requirements": ["Implement move constructor and assignment", "Avoid double-free and use noexcept where appropriate"],
      "hints": ["Follow rule of five when resource-managing"]
    },
    {
      "id": "ex6",
      "title": "Templates & Generic Programming",
      "description": "Write function and class templates, and a small type-safe container.",
      "duration": "1 hour",
      "difficulty": "Advanced",
      "language": "cpp",
      "theory": "Templates allow compile-time polymorphism and generic code; use `typename`/`class` keywords in templates.",
      "objective": "Implement a templated `max` function and a small templated pair class.",
      "initialCode": "/* template skeleton */",
      "solutionCode": "template<typename T>\nT my_max(const T &a,const T &b){ return (a>b)?a:b; }\ntemplate<typename A, typename B>\nstruct Pair{ A first; B second; Pair(A a,B b):first(a),second(b){} };\nint main(){ std::cout<<my_max(3,5)<<\"\\n\"; Pair<int,std::string> p(1,\"x\"); }\n",
      "requirements": ["Use templates correctly", "Demonstrate usage with different types"],
      "hints": ["Prefer `std::pair` in real code unless custom behavior required"]
    },
    {
      "id": "ex7",
      "title": "Concurrency Basics (threads)",
      "description": "Simple multithreading with `std::thread` and synchronization with `std::mutex`.",
      "duration": "1.5 hours",
      "difficulty": "Advanced",
      "language": "cpp",
      "theory": "Use threads for concurrency and mutexes/locks to protect shared data. Avoid data races.",
      "objective": "Create multiple threads incrementing a shared counter safely using `std::mutex`.",
      "initialCode": "/* thread skeleton */",
      "solutionCode": "#include <thread>\n#include <mutex>\n#include <vector>\n#include <iostream>\nint main(){ int counter=0; std::mutex m; auto worker=[&]{ for(int i=0;i<1000;i++){ std::lock_guard<std::mutex> lk(m); counter++; }}; std::vector<std::thread> t; for(int i=0;i<4;i++) t.emplace_back(worker); for(auto &th:t) th.join(); std::cout<<counter<<\"\\n\"; }\n",
      "requirements": ["Use mutex/lock_guard to avoid data race", "Join threads before exit"],
      "hints": ["Consider `std::atomic` for simple counters"]
    },
    {
      "id": "ex8",
      "title": "Final Project: Small C++ Application",
      "description": "Build a small, production-minded C++ app (CLI or small GUI) using modern C++ features, tests and CMake.",
      "duration": "8-12 hours",
      "difficulty": "Advanced",
      "language": "cpp",
      "theory": "CMake is widely used for cross-platform builds; unit testing with Google Test or Catch2 is common.",
      "objective": "Deliver a C++ project with CMakeLists, README, modular code and at least one unit test.",
      "initialCode": "/* scaffold project */",
      "solutionCode": "/* Example deliverables: src/, include/, tests/, CMakeLists.txt, README */",
      "requirements": ["Use modern C++ features (smart pointers, move semantics)", "Provide CMake build and test instructions"],
      "hints": ["Keep interfaces small and prefer composition over inheritance"]
    }
  ],
  "references": [
    {
      "title": "C++ Reference (cppreference.com)",
      "description": "Up-to-date reference for C++ standard library and language details.",
      "url": "https://en.cppreference.com/"
    },
    {
      "title": "Effective Modern C++ (Scott Meyers)",
      "description": "Best practices for modern C++ usage.",
      "url": "https://www.oreilly.com/library/view/effective-modern-c/9781491908419/"
    },
    {
      "title": "The C++ Programming Language (Bjarne Stroustrup)",
      "description": "Comprehensive guide by the language creator.",
      "url": "https://www.stroustrup.com/Programming.html"
    }
  ]
}
